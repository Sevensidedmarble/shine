
grammar JSONGrammar
   utf8 = require('utf8')

   JSON <- (
        <null>
      | <boolean>
      | <string>
      | <number>
      | <array>
      | <table>
   )

   decode_escapes <- (
        '\\\\' -> '\\'
      | "\\r"  -> "\r"
      | "\\n"  -> "\n"
      | "\\f"  -> "\f"
      | "\\b"  -> "\b"
      | "\\t"  -> "\t"
      | {~ ("\\u" { %xdigit^4 }) -> (code) =>
         return utf8::char(tonumber('0x'~code))
      end ~}
   )

   boolean <- "true"  {`true`} | "false" {`false`}
   string <-
        '"' {~ (<decode_escapes> | ('\"'  -> '"') | !'"' .)* ~} '"'
      | "'" {~ (<decode_escapes> | ("\\'" -> "'") | !"'" .)* ~} "'"

   null <- "null" {`null`}

   number <- (
      (<hexadec> | <decimal>) -> tonumber
   )
   hexadec <- (
      "-"? %space* "0x" %xdigit+
   )
   decimal <- (
      "-"? %space* %digit+
      ("." %digit+)?
      ([eE] "-"? %digit+)?
   )
   array <- (
      ("[" {| %space* <items>? %space* |} "]") -> (t) =>
         a = [ ]
         for i=1, #t do
            v = t[i]
            if v == null then
               v = nil
            end
            a.push(v)
         end
         return a
      end
   )
   items <- (
      <JSON> (%space* "," %space* <JSON>)*
   )
   table <- (
      ("{" {| %space* <pairs>? %space* |} "}") -> (t) =>
         h = { }
         for i=1, #t, 2 do
            h[t[i]] = t[i+1]
         end
         return h
      end
   )
   pairs <- (
      <pair> (%space* "," %space* <pair>)*
   )
   pair <- (
      <string> %space* ":" %space* <JSON>
   )
end

module JSON

   encode_escapes = {
      ["\b"] = "\\b",
      ["\t"] = "\\t",
      ["\n"] = "\\n",
      ["\f"] = "\\f",
      ["\r"] = "\\r"
      ['"']  = "\\\"",
      ['\\'] = "\\\\",
      ['/']  = "\\/"
   }

   local encode_helper

   encode(item)
      buf = { }
      function buf.write(str)
         self[#self + 1] = str
      end
      seen = { }
      encode_helper(buf, item, seen)
      return table::concat(buf)
   end

   decode(jstr)
      return JSONGrammar(jstr)
   end

   encode_helper = function(buf, item, seen)
      t = type(item)
      if t == "table" then
         if seen[item] then
            error("cycle detected")
         end
         seen[item] = true
         if item is Array then
            buf.write("[")
            prev = false
            for i,v in ipairs(item) do
               if prev then
                  buf.write(",")
               else
                  prev = true
               end
               encode_helper(buf, v, seen)
            end
            buf.write("]")
         else
            buf.write("{")
            prev = false
            for k,v in pairs(item) do
               if prev then
                  buf.write(",")
               else
                  prev = true
               end
               buf.write("%q".format(tostring(k)))
               buf.write(":")
               encode_helper(buf, v, seen)
            end
            buf.write("}")
         end
      elseif t == "number" then
         buf.write(tostring(item))
      elseif t == "string" then
         buf.write('"')
         str = item
         str = str.gsub "([%z\1-\127\194-\244][\128-\191]*)", (c) =>
            if #c == 1 then
               if encode_escapes[c] then
                  return encode_escapes[c]
               elseif c.match "[%z%c\\\"]" then
                  return "\\u00%02x".format(c.byte())
               else
                  return c
               end
            end
            return "\\u%.4X".format(utf8::codepoint(c))
         end

         buf.write(str)
         buf.write('"')
      elseif t == "boolean" then
         buf.write(tostring(item))
      elseif t == 'nil' or item == null then
         buf.write("null")
      else
         error("cannot encode a: %{t}")
      end
   end
end

function json_encode(item)
   return JSON.encode(item)
end

function json_decode(jstr)
   return JSON.decode(jstr)
end

