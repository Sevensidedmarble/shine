
class URI
   local pattern = /{|
      {:scheme:    {[^:/?#]+}":" :}?
      {:authority: "//"{[^/?#]*} :}?
      {:path:      {[^?#]*}      :}
      {:query:     "?"{[^#]*}    :}?
      {:fragment:  "#"{.*}       :}?
   |}/

   self(uristr)
      if uristr then
         self.parse(uristr)
      end
   end
   parse(uristr)
      {
         scheme    = self.scheme,
         authority = self.authority,
         path      = self.path,
         fragment  = self.fragment
      } = pattern.match(uristr)
   end

   function self::unescape(s)
      s = s.gsub("+", " ")
      return s.gsub "%%(%x%x)", (h) =>
         return string::char(tonumber(h, 16))
      end
   end

   function self::escape(s)
      s = s.gsub "([&=+%c])", (c) =>
         return "%%%02X".format(string::byte(c))
      end
      return s.gsub(" ", "+")
   end

   function self::encode(t = { })
      buf = [ ]
      for k,v in t do
         buf.push("%{self::escape(k)}=%{self::escape(v)}")
      end
      return buf.join("&")
   end

   function self::decode(s = "", t = { })
      for k, v in s.gmatch "([^&=]+)=([^&=]+)" do
         local k = self::unescape(k)
         local v = self::unescape(v)
         t[k] = v
      end
      return t
   end

   __tostring__()
      buf = { }
      if self.scheme then
         buf[#buf + 1] = self.scheme ~ ":"
      end
      if self.authority then
         buf[#buf + 1] = "//" ~ self.authority
      end
      buf[#buf + 1] = self.path
      if self.query then
         buf[#buf + 1] = "?" ~ self.query
      end
      if self.fragment then
         buf[#buf + 1] = "#" ~ self.fragment
      end
      return table::concat(buf)
   end
end

