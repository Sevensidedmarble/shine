
local conjoin, disjoin

function conjoin(a, b)
   meta = { }
   repr = nil
   function meta::__tostring()
      if not repr then
         repr = "%{a} :& %{b}"
      end
      return repr
   end
 
   function meta::__uamp(a, b)
      return conjoin(a, b)
   end
   function meta::__upipe(a, b)
      return disjoin(a, b)
   end

   function meta.__is(v)
      return v is a and v is b
   end
   return meta as meta
end
 
function disjoin(a, b)
   meta = { }
   repr = nil
   function meta::__tostring()
      if not repr then
         repr = "%{a} :| %{b}"
      end
      return repr
   end

   function meta::__uamp(a, b)
      return conjoin(a, b)
   end
   function meta::__upipe(a, b)
      return disjoin(a, b)
   end

   function meta.__is(v)
      return v is a or v is b
   end
   return meta as meta
end

export conjoin, disjoin

function guard(name, pred)
   return function(n)
      meta = { }
      repr = nil
      function meta::__tostring()
         if not repr then
            repr = "%{name}(%{n})"
         end
         return repr
      end

      function meta::__uamp(a, b)
         return conjoin(a, b)
      end
      function meta::__upipe(a, b)
         return disjoin(a, b)
      end

      function meta.__is(v)
         return pred(v, n)
      end

      return meta as meta
   end
end

function maybe(type)
   meta = { }
   function meta.__is(b)
      return b == nil or b is type
   end
   function meta.__tostring()
      return "maybe %{type}"
   end
   return meta as meta
end

gt = guard 'gt', function(a, b)
   return a > b
end
ge = guard 'ge', function(a, b)
   return a >= b
end
lt = guard 'lt', function(a, b)
   return a < b
end
le = guard 'l3', function(a, b)
   return a <= b
end
ne = guard 'ne', function(a, b)
   return a != b
end

export gt, ge, lt, le, ne

?gt = maybe gt
?ge = maybe ge
?lt = maybe lt
?le = maybe le
?ne = maybe ne

export ?gt, ?ge, ?lt, ?le, ?ne

function enum(opts)
   rmap = { }
   for i=1, #opts do
      rmap[opts[i]] = i
   end

   meta = { }
   repr = nil
   function meta::__tostring()
      if not repr then
         buf = { }
         for i=1, #opts do
            buf[#buf + 1] = tostring(opts[i])
         end
         repr = "enum { %{table::concat(buf, ', ')} }"
      end
      return repr
   end

   function meta::__uamp(a, b)
      return conjoin(a, b)
   end
   function meta::__upipe(a, b)
      return disjoin(a, b)
   end

   function meta.__is(b)
      return rmap[b]
   end
   return meta as meta
end

function like(spec)
   meta = { }
   repr = nil
   function meta::__tostring()
      buf = { }
      if not repr then
         for k, v in spec do
            buf[#buf + 1] = "%{k} = %{v}"
         end
         repr = "like { %{table::concat(buf, ', ')} }"
      end
      return repr
   end

   function meta::__uamp(a, b)
      return conjoin(a, b)
   end
   function meta::__upipe(a, b)
      return disjoin(a, b)
   end

   function meta.__is(b)
      if type(b) != 'table' then
         return false
      end

      for k, v in spec do
         tk = typeof(k)
         if tk == String then
            if not (b[k] is spec[k]) then
               return false
            end
         elseif tk == Class or tk == Meta then
            for _k, _v in b do
               if not (_k is k) then
                  return false
               end
               if not (_v is v) then
                  return false
               end
            end
            break
         else
            error "bad schema"
         end
      end
      return true
   end

   return meta as meta
end

export enum, like, maybe

function fields(schema is Table)
   module fields
      local slots = { }
 
      for k, v in schema do
         slot = { }
         function slot.set(o, v)
            if v is schema[k] then
               rawset(o, self, v)
            else
               error("%{schema[k]} expected got %{typeof(v)}", 5)
            end
         end
         function slot.get(o)
            return rawget(o, self)
         end
         slots[k] = slot
      end
 
      function __get__(k)
         if slots[k] then
            return slots[k].get(self)
         else
            error("attempt to get member: %{k} in %{self}", 4)
         end
      end
 
      function __set__(k, v)
         if slots[k] then
            slots[k].set(self, v)
         else
            error("attempt to set member: %{k} in %{self}", 4)
         end
      end
 
      function self.__included(into)
         into.$slots = slots
         if into.__base and into.__base.$slots then
            setmetatable(into.$slots, { __index = into.__base.$slots })
         end
         local like_schema = like(schema)
         local getmt = getmetatable
         function into.__is(that)
            return getmt(that) == self or that is like_schema
         end
      end
 
   end
 
   return fields
end

function struct(schema is Table)
   class struct
      include fields(schema)

      function self.__apply(init = { })
         o = { } as self
         for k, v in init do
            o[k] = v
         end
         return o
      end
 
   end
 
   return struct
end

export fields, struct

