import ffi, C from "sys.ffi"
import lib from "async.loop.ffi"

import Queue from "data.queue"

function strerror(errno)
   return ffi::string(C::strerror(errno))
end

class Timer
   self(delay, times = 0, react, data)
      self.delay = delay
      self.times = times
      self.react = react
      self.data  = data
      self.when  = -1
   end
   start(loop = IOLoop)
      loop.add_timer(self)
   end
   stop(loop = IOLoop)
      loop.del_timer(self)
   end
end

class Idle
   self(react)
      self.react = react
   end
   start(loop = IOLoop)
      loop.add_idle(self)
   end
   stop(loop = IOLoop)
      loop.del_idle(self)
   end
end

class Poller
   local evbits

   self.POLLIN  = 0x01
   self.POLLOUT = 0x02
   self.POLLERR = 0x04

   self(fd, events = 0, react)
      self.fd    = fd
      self.react = react
      self.event = ffi::new('upoll_event_t')
      self.event.events = events
   end

   start(loop = IOLoop)
      loop.add_poller(self)
   end
   stop(loop = IOLoop)
      loop.del_poller(self)
   end

   modify(events, loop = IOLoop)
      if events < 0 then
         self.event.events &= ~(-events)
      else
         self.event.events |= events
      end
      loop.mod_poller(self)
   end
end

module IOLoop

   local upoll = lib::upoll_create(1024)

   local timers  = Queue()
   local idles   = Queue()
   local pollers = { }

   local poll_max = 128
   local poll_evt = ffi::new("upoll_event_t[?]", poll_max)
   local poll_dur = -1
   local poll_cnt = 0

   timer(delay, times = 0, react, data)
      return Timer(delay, times, react, data)
   end
   add_timer(timer)
      if not timer.queued then
         timer.queued = true
         timers.enqueue(timer)
      end
      timer.active = true
   end
   del_timer(timer)
      timer.active = false
   end

   idle(react)
      return Idle(react)
   end
   add_idle(idle)
      if not idle.queued then
         idle.queued = true
         idles.enqueue(idle)
      end
      idle.active = true
   end
   del_idle(idle)
      idle.active = false
   end

   poller(fd, events, react)
      return Poller(fd, events, react)
   end

   add_poller(poller)
      if not poller.index then
         poller.index = tonumber(poller.fd)
         pollers[poller.index] = poller
         poller.event.data.fd = poller.index
         rc = lib::upoll_ctl(upoll, lib.UPOLL_CTL_ADD, poller.fd, poller.event)
         poll_cnt += 1
         if poll_cnt > poll_max then
            poll_max *= 2
            poll_evt = nil
         end
      end
   end
   del_poller(poller)
      if poller.index then
         poller.event.events = -1
         lib::upoll_ctl(upoll, lib.UPOLL_CTL_DEL, poller.fd, nil)
         pollers[poller.index] = nil
         poller.index = nil
         poll_cnt -= 1
      end
   end
   mod_poller(poller)
      if poller.index then
         lib::upoll_ctl(upoll, lib.UPOLL_CTL_MOD, poller.fd, poller.event)
         if poller.event.events == 0 and not poller.paused then
            poller.paused = true
            poll_cnt -= 1
         elseif poller.paused and poller.event.events != 0 then
            poll_cnt += 1
            poller.paused = nil
         end
      end
   end

   local now = ffi::new("struct timeval")
   local function gettime()
      C::gettimeofday(now, nil)
      return tonumber(now.tv_sec * 1000 + now.tv_usec / 1000)
   end

   local _running = false

   run_init()
      _running = true
      tloop = gettime()
      for _, timer in timers do
         timer.when = timer.delay + tloop
      end
   end

   run()
      self.run_init()
      again = true
      while _running and again do
         again = self.run_once()
      end
      if again and not _running then
         -- interrupted
         return again
      end
   end

   stop()
      _running = false
   end

   running()
      return _running
   end

   count()
      return timers.count() + poll_cnt
   end

   run_once(timeout = -1)
      if not _running then
	 self.run_init()
      end

      -- calculate timers
      tloop = gettime()
      tnext = tloop + 3600 * 1000
      if timers.count() > 0 then
         timers.each (timer) =>
            if timer.when == -1 then
               timer.when = timer.delay + tloop
            end
            if tnext > timer.when then
               tnext = timer.when
            end
            if not timer.active then
               timer.queued = false
               return false
            end
         end
      end

      if timeout == 0 then
	 poll_dur = 0
      elseif timeout > 0 then
	 poll_dur = tnext - tloop
	 if poll_dur > timeout then
	    poll_dur = timeout
	 end
      else
	 poll_dur = tnext - tloop
	 if poll_dur < 0 then
	    poll_dur = 0
	 end
      end

      -- run idle handlers
      if self.count() == 0 and self.idles.count() > 0 then
	 idles.each (idle) =>
	    idle.react(self)
	    if not idle.active then
	       idle.queued = false
	       return false
	    end
	 end
      end

      -- check poll set
      if poll_evt == nil then
         poll_evt = ffi::new("upoll_event_t[?]", poll_max)
      end

      -- poll
      --print "upoll_wait:", poll_dur, poll_cnt
      local rv = lib::upoll_wait(upoll, poll_evt, poll_max, poll_dur)

      -- run expired timers
      if timers.count() > 0 then
         tloop = gettime()
         timers.each (timer) =>
            if timer.when != -1 and tloop >= timer.when then
               timer.times -= 1
               if timer.times == 0 then
                  timer.active = false
               end
               timer.when = timer.delay + tloop
               timer.react()
               tloop = gettime()
               if not timer.active then
                  timer.queued = false
                  return false
               end
            end
         end
      end

      -- run poll handlers
      if rv > 0 then
         for i = 0, rv - 1 do
            events = tonumber(poll_evt[i].events)
            poller = pollers[tonumber(poll_evt[i].data.fd)]
            poller.react(events)
         end
      elseif rv < 0 then
         errno = ffi::errno()
         throw strerror(errno)
      end

      return self.count() > 0
   end
end


